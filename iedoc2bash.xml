<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://www.w3.org/1999/xhtml">
<!--
Copyright 2011 Jan Friesse <jfriesse@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<xsl:output method="text"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
<!--- generate top of file -->
<xsl:text>#!/bin/bash

# Copyright 2011 Jan Friesse &lt;jfriesse@gmail.com&gt;
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file has been automatically generated via XSL

usage() {
	echo "$0: command [param...]"
	echo "where command is one of:"
	echo "	init"
	echo "	start"
	echo "	stop"
	echo "	help"
</xsl:text>
<xsl:apply-templates select="//function" mode="usage-list" />
<xsl:text>
	echo
	echo "Use $0 help command to get full description of command."
	echo "$0 help top can be used for display help generated from top xml element (description of locators, ...)"

	exit 1
}

help() {
	case "$1" in
	"init")
		echo "init [browser_url] [browser] [host] [port]"
		echo "Initialize session"
		echo "	browser_url - url to test (default http://localhost/)"
		echo "	browser - browser to start (default *firefox)"
		echo "	host - host with selenium server (default 127.0.0.1)"
		echo "	port - port with selenium selenium (default 4444)"
		echo
		echo "export commands are returned and should be used in eval \`$0 init\` way"
		;;
	"start")
		echo "start"
		echo "Start new browser session"
		echo "export command is returned and should be used as session in eval \`$0 start\` way"
		;;
	"stop")
		echo "stop"
		echo "Stop browser session (close browser)"
		echo "shell commands are returned to unset SELENIUM_BASH_SESSION"
		;;
	"top")
</xsl:text>
<xsl:apply-templates select="//top" mode="help" />
<xsl:text>		;;
	"help")
		echo "help command"
		echo "Displays help for command"
		;;
</xsl:text>
<xsl:apply-templates select="//function" mode="cmd-help" />
<xsl:text>*)
		usage
		;;
	esac
}

# Initialize session: [browser_url] [browser] [host] [port]
#	browser_url - Browser URL (default http://localhost/)
#	browser - Browser to start (default *firefox)
#	host - Host with selenium server (default 127.0.0.1)
#	port - Port with selenium server (default 4444)
# Echoed is export command with variables SELENIUM_BASH_[HOST|PORT|BROWSER|BROWSER_URL]
init() {
	browser_url=${1:-http://localhost/}
	browser=${2:-*firefox}
	host=${3:-127.0.0.1}
	port=${4:-4444}

	echo "export SELENIUM_BASH_HOST=\"$host\"; export SELENIUM_BASH_PORT=\"$port\";"
	echo "export SELENIUM_BASH_BROWSER=\"$browser\"; export SELENIUM_BASH_BROWSER_URL=\"$browser_url\";"
}

# Internal function to display error and exit: [error_msg...]
err() {
	echo "$@" >&amp;2

	exit 1
}

# Quote url: url
url_quote() {
    y="$@";

    y=${y/\\/\\\\}
    y=${y// /+}

    echo -n "$y" | (while read -n1 c;do
        [[ "$c" =~ [A-Za-z0-9+] ]] &amp;&amp; echo -n "$c" || (echo -n "%`printf '%02x' \'$c | rev | cut -b -2 | rev`")
    done)
}

# Get response from server: url
http_get() {
	which curl >/dev/null 2>&amp;1 &amp;&amp; curl -s "$1" || wget -q "$1" -O -
}

# Run command: command [args...]
#	command - command to execute
#	args - Argument for commands
do_command() {
	if [ "$SELENIUM_BASH_HOST" == "" ] || [ "$SELENIUM_BASH_PORT" == "" ];then
		err "SELENIUM_BASH_HOST or SELENIUM_BASH_PORT is not initialized"
	fi

	url="http://$SELENIUM_BASH_HOST:$SELENIUM_BASH_PORT/selenium-server/driver/?cmd=`url_quote $1`"

	shift
	i=0
	for param in "$@";do
		i=$(($i+1))
		url="$url&amp;$i=`url_quote $param`"
	done

	[ "$SELENIUM_BASH_SESSION" != "" ] &amp;&amp; url="$url&amp;sessionId=$SELENIUM_BASH_SESSION"

	response=`http_get "$url"`
	res="$?"
	[ "$res" != "0" ] &amp;&amp; err "http_get error: $res"

	[ "${response:0:2}" != "OK" ] &amp;&amp; err "Server error: $response" || echo "$response"
}

# Get response stored in string: command [args]
get_string() {
	cmd="$1"
	shift
	res=`do_command "$cmd" "$@"`
	[ "$?" != 0 ] &amp;&amp; exit 1

	echo ${res:3}
}

# Start browser
start() {
	if [ "$SELENIUM_BASH_BROWSER_URL" == "" ] || [ "$SELENIUM_BASH_BROWSER" == "" ];then
		err "SELENIUM_BASH_BROWSER or SELENIUM_BASH_BROWSER_URL is not initialized"
	fi

	res=`get_string "getNewBrowserSession" "$SELENIUM_BASH_BROWSER" "$SELENIUM_BASH_BROWSER_URL"`
	[ "$?" != 0 ] &amp;&amp; exit 1

	echo "export SELENIUM_BASH_SESSION=\"$res\";"
}

# Stop browser
stop() {
	do_command "testComplete"
	echo "unset SELENIUM_BASH_SESSION; export SELENIUM_BASH_SESSION;"
}

</xsl:text>

<!-- Function definitions -->
<xsl:apply-templates select="//function" mode="definition" />

<!-- main -->
<xsl:text># Main
[ "$1" == "" ] &amp;&amp; usage

cmd="$1"
shift

case "$cmd" in
"init")
	init "$@"
	;;
"start")
	start
	;;
"stop")
	stop
	;;
"help")
	help "$@"
	;;
</xsl:text>
	<xsl:apply-templates select="//function" mode="main" />
<xsl:text>*)
	usage
	;;
esac
</xsl:text>
</xsl:template>

<xsl:template match="function" mode="definition">
	<!-- Func definition -->
	<xsl:text># Generated wrapper for </xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text> call&#10;fn_</xsl:text>
	<xsl:value-of select="lower-case(replace(@name,'([A-Z])','_$1'))" />
	<xsl:text>() {&#10;</xsl:text>

	<xsl:text>	[ "${#@}" -gt "</xsl:text>
	<xsl:value-of select="count(./param)" />
	<xsl:text>" ] &amp;&amp; err "Too much arguments"&#10;&#10;</xsl:text>
	<xsl:choose>
		<xsl:when test="count(./return) = 0">
			<xsl:text>	do_command</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:text>	get_string</xsl:text>
		</xsl:otherwise>
	</xsl:choose>

	<xsl:text> "</xsl:text>
	<xsl:value-of select="@name"/>
	<xsl:text>"</xsl:text>
	<xsl:text> "$@"</xsl:text>

	<xsl:if test="count(./return) = 0">
		<xsl:text> >/dev/null</xsl:text>
	</xsl:if>
	<xsl:text>&#10;}&#10;&#10;</xsl:text>
</xsl:template>

<xsl:template match="function" mode="main">
	<xsl:text>"</xsl:text>
	<xsl:value-of select="lower-case(replace(@name,'([A-Z])','-$1'))" />
	<xsl:text>")&#10;	fn_</xsl:text>
	<xsl:value-of select="lower-case(replace(@name,'([A-Z])','_$1'))" />
	<xsl:text> "$@"&#10;	;;&#10;</xsl:text>
</xsl:template>

<xsl:template match="function" mode="usage-list">
	<xsl:text>	echo "	</xsl:text>
	<xsl:value-of select="lower-case(replace(@name,'([A-Z])','-$1'))" />
	<xsl:text>"&#10;</xsl:text>
</xsl:template>

<xsl:template match="function" mode="cmd-help">
	<xsl:text>	"</xsl:text>
	<xsl:value-of select="lower-case(replace(@name,'([A-Z])','-$1'))" />
	<xsl:text>")&#10;</xsl:text>

	<!-- command name + arguments -->
	<xsl:text>		echo "</xsl:text>
	<xsl:value-of select="lower-case(replace(@name,'([A-Z])','-$1'))" />
	<xsl:apply-templates select="./param" mode="cmd-help" />
	<!-- comment -->
	<xsl:text>"&#10;		echo '</xsl:text>
	<xsl:apply-templates select="./comment" mode="cmd-help" />
	<xsl:text>'&#10;</xsl:text>
	<xsl:text>		echo&#10;</xsl:text>

	<!-- parameters -->
	<xsl:apply-templates select="./param" mode="cmd-help2" />

	<!-- description -->
	<xsl:text>		;;&#10;</xsl:text>
</xsl:template>

<xsl:template match="param" mode="cmd-help">
	<xsl:text> [</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>]</xsl:text>
</xsl:template>

<xsl:template match="comment" mode="cmd-help">
	<xsl:variable name="search">'</xsl:variable>
	<xsl:variable name="replace">'\\''</xsl:variable>
	<xsl:variable name="text"><xsl:apply-templates /></xsl:variable>
	<xsl:value-of select="replace(replace(replace($text,$search,$replace),'&#10;',' '),'  *',' ')" />
</xsl:template>

<xsl:template match="param" mode="cmd-help2">
	<xsl:text>		echo '	</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text> - </xsl:text>

	<xsl:variable name="search">'</xsl:variable>
	<xsl:variable name="replace">'\\''</xsl:variable>
	<xsl:variable name="text"><xsl:apply-templates /></xsl:variable>
	<xsl:value-of select="replace(replace(replace($text,$search,$replace),'&#10;',' '),'  *',' ')" />
	<xsl:text>'&#10;</xsl:text>
</xsl:template>

<xsl:template match="top" mode="help">
	<xsl:text>		echo '</xsl:text>
	<xsl:apply-templates mode="help" />
	<xsl:text>'&#10;</xsl:text>
</xsl:template>

<xsl:template match="text()" mode="help">
	<xsl:variable name="text"><xsl:value-of select='.' /></xsl:variable>
	<xsl:variable name="search">'</xsl:variable>
	<xsl:variable name="replace">'\\''</xsl:variable>
	<xsl:value-of select="replace(replace(replace(replace($text,$search,$replace),'&#10;',' '),'  *',' '),'^  *','')" />
</xsl:template>

<xsl:template match="h3" mode="help">
	<xsl:text>&#10;= </xsl:text>
	<xsl:apply-templates mode="help" />
	<xsl:text> =&#10;</xsl:text>
</xsl:template>

<xsl:template match="p" mode="help">
	<xsl:text>&#10;</xsl:text>
	<xsl:apply-templates mode="help" />
</xsl:template>

<xsl:template match="blockquote" mode="help">
	<xsl:text>&#10;</xsl:text>
	<xsl:apply-templates mode="help" />
	<xsl:text>&#10;</xsl:text>
</xsl:template>

<xsl:template match="li" mode="help">
	<xsl:param name="indent" />

	<xsl:text>&#10;	</xsl:text>
	<xsl:value-of select="$indent" />
	<xsl:text>* </xsl:text>

	<xsl:apply-templates mode="help">
		<xsl:with-param name="indent">
			<xsl:value-of select="$indent" />
			<xsl:text>	</xsl:text>
		</xsl:with-param>
	</xsl:apply-templates>
</xsl:template>

<xsl:template match="ul|ol|dl" mode="help">
	<xsl:param name="indent" />

	<xsl:apply-templates mode="help" >
		<xsl:with-param name="indent"><xsl:value-of select="$indent" /></xsl:with-param>
	</xsl:apply-templates>
</xsl:template>

</xsl:stylesheet>
